@implements IDisposable
@if (appState.ShowVacation)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-danger shadow-lg">
                    <div class="card-header"> <h4 class="float-start">Manage Employees Vacations</h4></div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">                           
                            @{
                                var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                            }
                            <SfGrid DataSource="@Vacations" AllowPaging="true" AllowSorting="true" Toolbar="@Tool" AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                <GridSearchSettings Fields=@SearchFields Operator=Syncfusion.Blazor.Operator.Contains IgnoreCase="true"></GridSearchSettings>
                                <GridPageSettings PageSize="5"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="VacationDTO"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field="@nameof(VacationDTO.EmployeeId)" HeaderText="ID" Visible="false"></GridColumn>
                                    <GridColumn Field="@nameof(VacationDTO.EmployeeFullName)" HeaderText="Full Name"></GridColumn>
                                    <GridColumn HeaderText="Type">
                                        <Template>
                                            @{
                                                var item = (context as VacationDTO);
                                                <div>
                                                    @item!.VacationType!.Name
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn Field="@nameof(VacationDTO.StartDate)" HeaderText="Start Date"></GridColumn>
                                    <GridColumn Field="@nameof(VacationDTO.EndDate)" HeaderText="End Date"></GridColumn>
                                    <GridColumn Field="@nameof(VacationDTO.NumberOfDays)" HeaderText="Number of days"></GridColumn>
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                            @{
                                                var employee = (context as VacationDTO);
                                                <div>
                                                    <i class="bi bi-pencil text-info cursorStyle" @onclick="()=>EditClicked(employee!)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle" @onclick="()=>DeleteClicked(employee!)"></i>
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                  </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<VacationDialog @ref="vacationDialog"
                ItemModel="ItemModel"
                VacationTypes="VacationTypes"
                HandleSaveOperationEvent="HandleSaveOperationEvent">
</VacationDialog>

@code {
    private SfGrid<VacationDTO>? DefaultGrid;
    VacationDialog? vacationDialog;
    VacationDTO ItemModel = new();
    public List<VacationDTO> Vacations { get; set; } = new();
    public List<VacationType> VacationTypes { get; set; } = new();
    public string[] SearchFields { get; set; } = new string[] { "EmployeeFullName", "VacationType.Name" };

    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetVacations();
        //await GetVacations2();
        appState.Action += StateHasChanged;
        appState.RefreshVacationsRequested += RefreshVacations;
    }

    private async void RefreshVacations()
    {
        await GetVacations();
    }

    private async Task GetTypes() => VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

    private async Task GetVacations() => Vacations = await vacationService.GetAll(Constants.VacationBaseUrl);

    void OpenDialog() => vacationDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(VacationDTO item)
    {
        var result = await vacationService.Update(item, Constants.VacationBaseUrl);
        bool successCheck = await Helpers.DisplayMessage(result.Flag, result.Message, dialogService);
        if (successCheck)
        {
            ItemModel = new();
            await GetVacations();
        }
    }

    private void EditClicked(VacationDTO item)
    {
        ItemModel = item;
        OpenDialog();
    }

    private async Task DeleteClicked(VacationDTO item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete this?", "Confirm delete");
        if (!confirm) return;

        var response = await vacationService.DeleteById(item.EmployeeId, Constants.VacationBaseUrl);
        var result = await Helpers.DisplayMessage(response.Flag, response.Message, dialogService);
        if (result)
            await GetVacations();
    }

    public void Dispose() => appState.Action -= StateHasChanged;

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExportToExcelAsync()!;

        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.ExportToPdfAsync()!;
    }
}
