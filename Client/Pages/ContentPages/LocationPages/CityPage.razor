@if (appState.ShowCity)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Cities</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i> Add City
                        </button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">City</th>
                                        <th scope="col">Country</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Cities is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Cities)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Name</td>
                                                <td>@item.Country!.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">No city added yet!</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<CityDialog @ref="cityDialog"
            HandleSaveOperationEvent="HandleSaveOperationEvent"
            City="City"
            Countries="Countries" />


@code {
    public string Title { get; set; } = "Add";
    CityDialog? cityDialog;
    City City = new();
    public List<City> Cities { get; set; } = new();
    public List<Country> Countries { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetCities();
        await GetCountries();
        appState.Action += StateHasChanged;
    }

    private async Task GetCities()
    {
        Cities = await cityService.GetAll(Constants.CityBaseUrl);
    }

    public async Task GetCountries()
    {
        Countries = await countryService.GetAll(Constants.CountryBaseUrl);
    }

    private void AddButtonClicked()
    {
        cityDialog?.ChangeTitle("Add");
        City = new();
        OpenDialog();
    }
    void OpenDialog()
    {
        cityDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(City city)
    {
        bool successCheck = false;
        if (city.Id > 0)
        {
            var result = await cityService
            .Update(city, Constants.CityBaseUrl);
            successCheck = await Helpers.DisplayMessage(result.Flag, result.Message, dialogService);
        }
        else
        {
            var response = await cityService
            .Insert(city, Constants.CityBaseUrl);
            successCheck = await Helpers.DisplayMessage(response.Flag, response.Message, dialogService);
        }
        if (successCheck)
        {
            City = new();
            await GetCities();
            cityDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(City city)
    {
        cityDialog?.ChangeTitle("Update");
        City = city;
        OpenDialog();
    }

    private async Task DeleteClicked(City city)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {city.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await cityService.DeleteById(city.Id, Constants.CityBaseUrl);
        if (await Helpers.DisplayMessage(response.Flag, response.Message, dialogService))
            await GetCities();
    }

    public void Dispose()
    {
        appState.Action -= StateHasChanged;
    }
}
