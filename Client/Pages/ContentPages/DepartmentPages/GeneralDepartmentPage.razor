@implements IDisposable

@if (appState.ShowGeneralDepartment)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">General Department</h4>
                        <button class="btn btn-outline-success float-end" @onclick="OpenDialog"><i class="bi bi-plus-circle-dotted"></i> Add Department </button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">General Department</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if(GeneralDepartments is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in GeneralDepartments)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }     
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <GeneralDepartmentDialog @ref="generalDepartmentDialog"
                            HandleSaveOperationEvent="HandleSaveOperationEvent"
                            GeneralDepartment="GeneralDepartment" />
}

<style>
    .cursorStyle{
        cursor: pointer;
    }
</style>


@code {
    GeneralDepartmentDialog? generalDepartmentDialog;
    GeneralDepartment GeneralDepartment = new();
    public string Title { get; set; } = "Add";
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetGeneralDepartments();
        appState.Action += StateHasChanged;
    }

    public async Task GetGeneralDepartments()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
    }

    void OpenDialog()
    {
        generalDepartmentDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(GeneralDepartment generalDepartment)
    {
        bool successCheck = false;
        if(generalDepartment.Id > 0)
        {
            var result = await generalDepartmentService
            .Update(generalDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await Helpers.DisplayMessage(result.Flag, result.Message, dialogService);
        }
        else
        {
            var response = await generalDepartmentService
            .Insert(generalDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await Helpers.DisplayMessage(response.Flag, response.Message, dialogService);
        }
        if (successCheck)
        {
            GeneralDepartment = new();
            await GetGeneralDepartments();
            generalDepartmentDialog?.ChangeTitle("Add");
            appState.RequestRefreshDefaults<GeneralDepartment>();
        }
    }

    private void EditClicked(GeneralDepartment dep)
    {
        generalDepartmentDialog?.ChangeTitle("Update");
        GeneralDepartment = dep;
        OpenDialog();
    }

    private async Task DeleteClicked(GeneralDepartment dep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {dep.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await generalDepartmentService.DeleteById(dep.Id, Constants.GeneralDepartmentBaseUrl);
        if (await Helpers.DisplayMessage(response.Flag, response.Message, dialogService))
            await GetGeneralDepartments();
    }

    public void Dispose()
    {
        appState.Action -= StateHasChanged;
    }
}
