@implements IDisposable
@if (appState.ShowEmployee)
{
    if (ShowMainPage)
    {
        <div class="container-fluid mt-5">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card-header"><button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
                        <i class="bi bi-plus-circle-dotted"></i> Add Employee </button></div>
                    <div class="card-body">
                        <SfGrid DataSource="@Employees">
                            <GridColumns>
                                <GridColumn HeaderText="Employee Image">
                                    <Template>
                                        @{
                                            var employee = (context as Employee);
                                            <div class="image">
                                                <img src="@employee!.Photo" alt="@employee!.Name" width="75" height="75" />
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(Employee.CivilId) HeaderText="Civil ID"></GridColumn>
                                <GridColumn Field=@nameof(Employee.FileNumber) HeaderText="File Number"></GridColumn>
                                <GridColumn Field=@nameof(Employee.Name) HeaderText="Name"></GridColumn>
                                <GridColumn Field=@nameof(Employee.TelephoneNumber) HeaderText="Telephone"></GridColumn>
                                <GridColumn Field=@nameof(Employee.JobName) HeaderText="Job Name"></GridColumn>
                                <GridColumn Field=@nameof(Employee.Branch.Name) HeaderText="Branch"></GridColumn>
                                <GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
                                    <Template>
                                        @{
                                            var employee = (context as Employee);
                                            <i class="bi bi-menu-down text-primary cursorStyle" @onclick="() => ShowMenuPopUp(employee!)"></i>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                    <div class="card-footer">
                    </div>
                </div>
            </div>
        </div>
    }
}

<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee"
                         Employee="Employee"
                         ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
                         NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
                         Countries="DefaultCountries"
                         Cities="SelectedCities"
                         GeneralDepartments="DefaultGeneralDepartments"
                         Departments="SelectedDepartments"
                         Branches="SelectedBranches"
                         HandleCountrySelectedEvent="HandleCountrySelectedEvent"
                         HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent"
                         HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent" 
                         HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent">
</AddOrUpdateEmployeePage>

<EmployeeDetailPage EmployeeDetails="Employee"
                    ShowDetailsPage="ShowDetailsPage"
                    HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked">

</EmployeeDetailPage>

<ContextMenu @ref="contextMenu" 
            HandleDeleteClicked="DeleteClicked"
            HandleEditClicked="EditClicked"
            HandleViewClicked="ViewClicked"
            HandleAddHealthClicked="AddHealthClicked"
            HandleAddOvertimeClicked="AddOvertimeClicked"
            HandleAddVacationClicked="AddVacationClicked"/>

<HealthDialog @ref="healthDialog" 
              Health="MedicalLeave"
              HandleSaveOperationEvent="SaveHealthEvent" />

<OvertimeDialog @ref="overtimeDialog"
                ItemModel="Overtime"
                OvertimeTypes="OvertimeTypes"
                HandleSaveOperationEvent="SaveOvertimeEvent" />

<VacationDialog @ref="vacationDialog"
                ItemModel="Vacation"
                VacationTypes="VacationTypes"
                HandleSaveOperationEvent="SaveVacationEvent" />            

@code {
    AddOrUpdateEmployeePage? addOrUpdateEmployee;
    public List<Employee> Employees { get; set; } = [];
    public Employee Employee { get; set; } = new();

    public List<Country> DefaultCountries { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];

    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];
    public List<City> SelectedCities { get; set; } = [];

    protected async override Task OnInitializedAsync()
    {
        appState.Action += StateHasChanged;
        await LoadEmployees();
        await LoadDefaults();
        await GetOvertimeTypes();
        await GetVacationTypes();
    }

    protected async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    private void HandleCountrySelectedEvent(int countryId) => 
    SelectedCities = DefaultCities.Where(c => c.CountryId == countryId).ToList();

    private void HandleGeneralDepartmentSelectedEvent(int generalDepartmentId) =>
    SelectedDepartments = DefaultDepartments.Where(c => c.GeneralDepartmentId == generalDepartmentId).ToList();

    private void HandleDepartmentSelectedEvent(int departmentId) =>
    SelectedBranches = DefaultBranches.Where(c => c.DepartmentId == departmentId).ToList();

    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
    }

    public async Task HandleSaveEmployeeClickedEvent(Employee employee)
    {
        bool successCheck = false;
        if(employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await Helpers.DisplayMessage(result.Flag, result.Message, dialogService);
        }
        else
        {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await Helpers.DisplayMessage(response.Flag, response.Message, dialogService);
        }
        if (successCheck)
            addOrUpdateEmployee!.ClearContent();
    }

    public Employee SelectedEmployee { get; set; } = new();
    ContextMenu? contextMenu;
    void ShowMenuPopUp(Employee employee)
    {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    }

    public void EditClicked()
    {
        addOrUpdateEmployee!.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployee!.EmployeeGroup1.Name = SelectedEmployee.Name;
        addOrUpdateEmployee!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber;
        addOrUpdateEmployee!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber;
        addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;
        addOrUpdateEmployee!.EmployeeGroup1.Photo = SelectedEmployee.Photo;
        addOrUpdateEmployee!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

        addOrUpdateEmployee!.EmployeeGroup2.JobName = SelectedEmployee.JobName;
        addOrUpdateEmployee!.EmployeeGroup2.Other = SelectedEmployee.Other;

        addOrUpdateEmployee!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name;
        addOrUpdateEmployee!.Department = SelectedEmployee.Branch!.Department!.Name;
        addOrUpdateEmployee!.Branch = SelectedEmployee.Branch!.Name;

        addOrUpdateEmployee!.Country = SelectedEmployee.City!.Country!.Name;
        addOrUpdateEmployee!.City = SelectedEmployee.City!.Name;

        addOrUpdateEmployee.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = true;
    }

    private async Task DeleteClicked()
    {
        contextMenu!.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {SelectedEmployee}?", "Confirm Delete");
        if (!confirm) return;

        var response = await branchService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        var result = await Helpers.DisplayMessage(response.Flag, response.Message, dialogService);
        if(result)
        {
            SelectedEmployee = new();
            await LoadEmployees();
        }
    }

    public bool ShowDetailsPage { get; set; } = false;
    private void ViewClicked()
    {
        Employee = SelectedEmployee;
        contextMenu!.CloseContextMenu();
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = new();
    }

    private async Task GetOvertimeTypes() => OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);
    private async Task GetVacationTypes() => VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

    HealthDialog? healthDialog;
    MedicalLeave MedicalLeave = new();
    private void AddHealthClicked()
    {
        MedicalLeave.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        healthDialog!.OpenDialog();
    }

    public async Task SaveHealthEvent(MedicalLeave item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await healthService.Insert(item, Constants.HealthBaseUrl);
        var response = await Helpers.DisplayMessage(flag, message, dialogService);
        if (response)
        {
            SelectedEmployee = new();
            MedicalLeave = new();
            healthDialog!.CloseDialog();
            appState.RequestHealthRefresh();
        }
    }

    OvertimeDialog? overtimeDialog;
    Overtime Overtime = new();
    List<OvertimeType> OvertimeTypes = [];
    private void AddOvertimeClicked()
    {
        Overtime.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        overtimeDialog!.OpenDialog();
    }

    async Task SaveOvertimeEvent(Overtime item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await overtimeService.Insert(item, Constants.OvertimeBaseUrl);
        var response = await Helpers.DisplayMessage(flag, message, dialogService);
        if (response)
        {
            SelectedEmployee = new();
            Overtime = new();
            overtimeDialog!.CloseDialog();
            appState.RequestOvertimeRefresh();
        }
    }

    VacationDialog? vacationDialog;
    Vacation Vacation = new();
    List<VacationType> VacationTypes = [];

    private void AddVacationClicked()
    {
        Vacation.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        vacationDialog!.OpenDialog();
    }

    async Task SaveVacationEvent(Vacation item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await vacationService.Insert(item, Constants.VacationBaseUrl);
        var response = await Helpers.DisplayMessage(flag, message, dialogService);
        if (response)
        {
            SelectedEmployee = new();
            Vacation = new();
            vacationDialog!.CloseDialog();
            appState.RequestVacationRefresh();
        }
    }

    void HandleDetailsPageCloseBtnClicked()
    {
        ShowDetailsPage = false;
        ShowMainPage = true;
    }

    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;

    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    public void Dispose() => appState.Action -= StateHasChanged;

}
